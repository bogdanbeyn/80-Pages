import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Search, Filter, Calendar, User, MessageCircle } from 'lucide-react';
import { pagesAPI, categoriesAPI } from '../services/api';
import PageCard from '../components/PageCard';

const PageList = () => {
  const [pages, setPages] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filters, setFilters] = useState({
    search: '',
    categoryId: '',
    page: 1,
  });
  const [pagination, setPagination] = useState({});

  useEffect(() => {
    fetchData();
  }, [filters]);

  const fetchData = async () => {
    try {
      setLoading(true);
      const [pagesResponse, categoriesResponse] = await Promise.all([
        pagesAPI.getPages(filters),
        categoriesAPI.getCategories(),
      ]);

      setPages(pagesResponse.data.pages);
      setPagination(pagesResponse.data.pagination);
      setCategories(categoriesResponse.data);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
      console.error('Error fetching data:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleSearchChange = (e) => {
    setFilters(prev => ({
      ...prev,
      search: e.target.value,
      page: 1,
    }));
  };

  const handleCategoryChange = (e) => {
    setFilters(prev => ({
      ...prev,
      categoryId: e.target.value,
      page: 1,
    }));
  };

  const handlePageChange = (newPage) => {
    setFilters(prev => ({
      ...prev,
      page: newPage,
    }));
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-16">
        <div className="text-red-600 text-6xl mb-4">‚ö†Ô∏è</div>
        <h2 className="text-2xl font-bold text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
        <p className="text-gray-600 mb-6">{error}</p>
        <button
          onClick={fetchData}
          className="btn-primary"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* head */}
      <div className="text-center">
        <h1 className="text-4xl font-bold text-gray-900 mb-4">
          –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        </h1>
        <p className="text-lg text-gray-600 max-w-2xl mx-auto">
          –ò—Å—Å–ª–µ–¥—É–π—Ç–µ 80 –≤–∞–∂–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç 
          —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –æ —Å–æ–±—ã—Ç–∏—è—Ö, –ª—é–¥—è—Ö –∏ –º–µ—Å—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞—à—É —Å—Ç—Ä–∞–Ω—É.
        </p>
      </div>

      {/* filters */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div className="flex flex-col md:flex-row gap-4">
          {/* search */}
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é..."
                value={filters.search}
                onChange={handleSearchChange}
                className="input-field pl-10"
              />
            </div>
          </div>

          {/* ctg filter */}
          <div className="md:w-64">
            <div className="relative">
              <Filter className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <select
                value={filters.categoryId}
                onChange={handleCategoryChange}
                className="input-field pl-10 appearance-none"
              >
                <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                {categories.map((category) => (
                  <option key={category.id} value={category.id}>
                    {category.name} ({category._count.pages})
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>
      </div>

      {/* results info */}
      <div className="flex justify-between items-center">
        <p className="text-gray-600">
          –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: <span className="font-semibold">{pagination.total || 0}</span>
        </p>
        {filters.search && (
          <p className="text-sm text-gray-500">
            –ü–æ–∏—Å–∫: "{filters.search}"
          </p>
        )}
      </div>

      {/* pg grid */}
      {pages.length > 0 ? (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {pages.map((page) => (
              <PageCard key={page.id} page={page} />
            ))}
          </div>

          {/* pagination */}
          {pagination.pages > 1 && (
            <div className="flex justify-center items-center space-x-2">
              <button
                onClick={() => handlePageChange(filters.page - 1)}
                disabled={filters.page === 1}
                className="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                –ù–∞–∑–∞–¥
              </button>
              
              {Array.from({ length: Math.min(5, pagination.pages) }, (_, i) => {
                const pageNum = i + 1;
                return (
                  <button
                    key={pageNum}
                    onClick={() => handlePageChange(pageNum)}
                    className={`px-3 py-2 text-sm font-medium rounded-lg ${
                      filters.page === pageNum
                        ? 'bg-primary-600 text-white'
                        : 'text-gray-500 bg-white border border-gray-300 hover:bg-gray-50'
                    }`}
                  >
                    {pageNum}
                  </button>
                );
              })}
              
              <button
                onClick={() => handlePageChange(filters.page + 1)}
                disabled={filters.page === pagination.pages}
                className="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                –í–ø–µ—Ä–µ–¥
              </button>
            </div>
          )}
        </>
      ) : (
        <div className="text-center py-16">
          <div className="text-gray-400 text-6xl mb-4">üìö</div>
          <h3 className="text-xl font-semibold text-gray-900 mb-2">
            –°—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </h3>
          <p className="text-gray-600">
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã
          </p>
        </div>
      )}
    </div>
  );
};

export default PageList;
